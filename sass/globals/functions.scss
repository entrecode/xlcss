//
// Functions
// =============================================================================

//
// Variables
// ---------

// Base Size
$base-unit: 8 !default;
$fontBaseSize: 16 !default;

//
// unitSize
// --------
// Use this function to set sizes with proportions.
//
// @access public
//
// @param {String} $multiplier - times the base unit ($base-unit by default)
// @param {Number} $offset - A value in pixels which will be added to the
//                  result, can be positive for addition or negative for
//                  subtraction
//
// @return {Number} Value in px, equal to the number of times the base unit
//                  plus the offset
//

@function unitSize($multiplier, $offset: 0) {
  @return ($base-unit * $multiplier + $offset) + px;
}

//
// trump
// --------
// function to make america a fraction of 100% great again!
//
// @access public
//
// @param {Number} $vote - divider (3 by default)
// @param {String} $wall - see for yourself
//
// @return {Number} Value in %
//

@function trump($vote: 3, $wall: false) {
  $usa: 100;
  $wallstreet: 99;
  $theOnePercent: $usa - $wallstreet +%;

  @if ($vote == 4 and $wall == 'president') {
    @warn "U! S! A! ... U! S! A! .... U! S! A! ... U! S! A! ...";
  }

  @return ($usa / $vote) * $theOnePercent;
}

//
// pxToEm
// ------
// Converts a Px value into a Em value
//
// @access public
//
// @param {Number} $px - value in pixels
// @param {Number} $base - Base font size
//
// @return {Number} Value in Ems
//

@function pxToEm($px, $base: $fontBaseSize) {
  @return ($px / $base) + em;
}

//
// getColor
// --------
// Easily retrieve colors for use.
//
// @access public
//
// @param {String} $color - Name of the color
// @param {Color}  $value - The color value to grab (default is "base")
//
// @return {Color} Value of the color
//

@function getColor($color, $value: "base") {
  @return map-get(map-get($colors, $color), $value);
}

//
// set color
// --------
// set color based on luminosity of another color
//
// @access public
// @param {Color} $color - Name of base color
// @param {Color} $dark - Name of dark color (default: #000000)
// @param {Color} $light - Name of light color (default: #ffffff)
//
// @return {Color} value of $light or $dark
//


@function setColor($color, $dark: #000, $light: #fff) {

  @if (opacity($color) > .5) {

    // if color hue is between 50 and 70 - yellow
    @if (hue($color) >= 50 and hue($color) <= 70) {
      @return $dark; // Lighter background, return dark color
    }

    @if (hue($color) >= 170 and hue($color) <= 190 or hue($color) >= 290 and hue($color) <= 310) {
      @if (lightness($color) <= 52) {
        @return $dark; // Lighter background, return dark color
      } @else {
        @return $light; // Lighter background, return dark color
      }
    } @else {
      @if (hue($color) >= 230 and hue($color) <= 250 or hue($color) >= 0 and hue($color) <= 10 or hue($color) >= 350 and hue($color) <= 360) {
        @if (lightness($color) > 70) {
          @return $dark; // Lighter background, return dark color
        } @else {
          @return $light; // Lighter background, return dark color
        }
      } @else {
        @if (lightness($color) > 62) {
          @return $dark; // Lighter background, return dark color
        } @else {
          @return $light; // Lighter background, return dark color
        }
      }
    }
  } @else {
    @return $dark;
  }
}

//
// set lightness
// --------
// reset a colors lightness
//
// @access public
// @param {Color} $color - Name of base color
// @param {Color} $value - lightness value
//
// @return {Color} value with new lightness value
//

@function set-lightness($color, $value) {
  $color-hue: hue($color);
  $color-sat: saturation($color);

  @return hsl($color-hue, $color-sat, $value);
}

//
// set saturation
// --------
// reset a colors saturation
//
// @access public
// @param {Color} $color - Name of base color
// @param {Color} $value - saturation value
//
// @return {Color} value with new saturation value
//

@function set-saturation($color, $value) {
  $color-hue: hue($color);
  $color-lightness: lightness($color);

  @return hsl($color-hue, $value, $color-lightness);
}