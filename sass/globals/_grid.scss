//
// atGrid.css - CSS Grid System with HTML Attributes
// =============================================================================
// https://github.com/jameskolce/atGrid
//
// Copyright 2014 James Kolce <contact@jameskolce.com>
// Licensed under MIT License
// (https://github.com/jameskolce/atGrid/blob/master/LICENSE)
//

//
// Variables
// ---------

// Breakpoints
$bpXs: 30em !default; /* 480px Big smartphone */
$bpSm: 48em !default; /* 768px Small devices */
$bpMd: 60em !default; /* 960px Medium devices */
$bpLg: 70em !default; /* 1120px Large devices */
$bpXl: 80em !default; /* 1280px Very Large devices*/

$bpXsMax: ($bpSm - 1) !default;
$bpSmMax: ($bpMd - 1) !default;
$bpMdMax: ($bpLg - 1) !default;
$bpLgMax: ($bpXl - 1) !default;

// Attribute prefix
$prefix: "data-" !default;

// Max width for container
$containerWidth: 1200px !default;

// Gutter size in pixels (without the unit we can do math easily)
$gutter: 32 !default;

// Number of columns in a row
$numColumns: 12 !default;

// If you only want to use the mixins for "semantic grids" set this to true
$onlySemantic: false !default;

$responsive: true;

//
// Mixins
// =============================================================================
// You can use this to create "semantic grids"
//

//
// Container
// ---------
// Use this mixin to create a row. Rows should be contained in a
// "container" element
//

@mixin container() {
  box-sizing: border-box;
  margin: 0 auto;
  max-width: $containerWidth;
  padding-left: ($gutter / 2) + px;
  padding-right: ($gutter / 2) + px;
  width: 100%;
}

//
// Rows
// ----
// Use this mixin to create a row. Columns should be contained in rows
//
// @clear-gutter: Set true to contain columns with gutter
//

@mixin row($clearGutter: true) {
  @if $clearGutter {
    margin-left: ($gutter / -2) + px;
    margin-right: ($gutter / -2) + px;
  }

  margin-bottom: 0;

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

//
// Columns
// -------
// Use this mixin to create a column
//
// @size: The size of the column, should be a number between 0-1. Example: 1/2
// @add-gutter: Set this to true if you want to create padding for the column
//

@mixin column($size, $addGutter: true) {
  box-sizing: border-box;
  position: relative;
  min-height: 1px;
  float: left;
  margin-bottom: 0;
  width: 100%;

  @if $size < 1 {
    @media (min-width: $bpSmall) {
      width: ($size * 100%);
    }
  }

  @if $addGutter {
    padding-left: ($gutter / 2) + px;
    padding-right: ($gutter / 2) + px;
  }
}

//
// Column offset
// -------
// Use this mixin to move a column
//
// @offset: The size of the offset, should be a number between 0-1. Example: 1/2
//

@mixin columnOffset($offset) {
  margin-left: $offset * 100%;
}

//
// Semantic Styles
// =============================================================================

@if not $onlySemantic {
  //
  // General Styles
  // --------------
  // Basic styles for the container, rows and columns
  //
  // Put the columns inside the rows, and the rows inside a container.
  //

  [#{$prefix}container] {
    @include container();
  }

  [#{$prefix}container="full"] {
    @include container();
    max-width: 100% !important;

    > [#{$prefix}row] {
      > [#{$prefix}col~="12"] {
        padding-right: 0;
        padding-left: 0;
      }
    }
  }

  [#{$prefix}row] {
    @include row();
  }

  //
  // Column Styles
  // -------------
  // Creates the width of the columns and their offset
  //
  // To use this grid system you need to use the following syntax in your
  // HTML files (This example uses default configuration):
  //
  // <main container>
  //   <div row>
  //     <section column="6">
  //       <!-- Column with a width of 6 columns -->
  //     </section>
  //
  //     <section column="4 +2">
  //       <!-- Column with a width of 4 columns and an offset of 2 columns -->
  //     </section>
  //   </div>
  // </main>
  //

  [#{$prefix}col] {
    @include column(1);
  }

  // Create columns
  @for $i from 1 through $numColumns {
    [#{$prefix}col~="#{$i}"] {
      width: floor(($i / $numColumns) * 100%);
    }
  }

  @for $i from 1 through $numColumns {
    [#{$prefix}col~="#{$i}xs"] {
      @media (min-width: $bpXs) {
        width: floor(($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through $numColumns {
    [#{$prefix}col~="#{$i}sm"] {
      @media (min-width: $bpSm) {
        width: floor(($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through $numColumns {
    [#{$prefix}col~="#{$i}md"] {
      @media (min-width: $bpMd) {
        width: floor(($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through $numColumns {
    [#{$prefix}col~="#{$i}lg"] {
      @media (min-width: $bpLg) {
        width: floor(($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through $numColumns {
    [#{$prefix}col~="#{$i}xl"] {
      @media (min-width: $bpXl) {
        width: floor(($i / $numColumns) * 100%);
      }
    }
  }

  // Offset for columns
  @for $i from 1 through ($numColumns - 1) {
    [#{$prefix}col~="+#{$i}"] {
      margin-left: (($i / $numColumns) * 100%);
    }
  }

  @for $i from 1 through ($numColumns - 1) {
    [#{$prefix}col~="+#{$i}xs"] {
      @media (min-width: $bpXs) {
        margin-left: (($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through ($numColumns - 1) {
    [#{$prefix}col~="+#{$i}sm"] {
      @media (min-width: $bpSm) {
        margin-left: (($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through ($numColumns - 1) {
    [#{$prefix}col~="+#{$i}md"] {
      @media (min-width: $bpMd) {
        margin-left: (($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through ($numColumns - 1) {
    [#{$prefix}col~="+#{$i}lg"] {
      @media (min-width: $bpLg) {
        margin-left: (($i / $numColumns) * 100%);
      }
    }
  }

  @for $i from 1 through ($numColumns - 1) {
    [#{$prefix}col~="+#{$i}xl"] {
      @media (min-width: $bpXl) {
        margin-left: (($i / $numColumns) * 100%);
      }
    }
  }

  // Non-responsive grid
  @if $responsive == false {
    .nonresponsive {
      // Create columns
      @for $i from 1 through $numColumns {
        [#{$prefix}col~="#{$i}"] {
          width: (($i / $numColumns) * 100%);
        }
      }

      // Offset for columns
      @for $i from 1 through ($numColumns - 1) {
        [#{$prefix}col~="+#{$i}"] {
          margin-left: (($i / $numColumns) * 100%);
        }
      }
    }
  }
}
