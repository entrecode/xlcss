//
// Functions
// =============================================================================

//
// Variables
// ---------

// Base Size
$base-unit: 8 !default;


//
// unitSize
// --------
// Use this function to set sizes with proportions.
//
// @access public
//
// @param {String} $multiplier - times the base unit ($base-unit by default)
// @param {Number} $offset - A value in pixels which will be added to the
//                  result, can be positive for addition or negative for
//                  subtraction
//
// @return {Number} Value in px, equal to the number of times the base unit
//                  plus the offset
//

@function unitSize($multiplier, $offset: 0) {
  @return ($base-unit * $multiplier + $offset) + px;
}


//
// pxToEm
// ------
// Converts a Px value into a Em value
//
// @access public
//
// @param {Number} $px - value in pixels
// @param {Number} $base - Base font size
//
// @return {Number} Value in Ems
//

@function pxToEm($px, $base: $fontBaseSize) {
  @return ($px / $base) + em;
}

//
// getColor
// --------
// Easily retrieve colors for use.
//
// @access public
//
// @param {String} $color - Name of the color
// @param {Color}  $value - The color value to grab (default is "base")
//
// @return {Color} Value of the color
//

@function getColor($color, $value: "base") {
  @return map-get(map-get($colors, $color), $value);
}

//
// set color
// --------
// set color based on luminosity of another color
//
// @access public
// @param {Color} $color - Name of base color
// @param {Color} $dark - Name of dark color (default: #000000)
// @param {Color} $light - Name of light color (default: #ffffff)
//
// @return {Color} value of $light or $dark
//

@function setColor($color, $dark: #000000, $light: #ffffff) {
  @if (lightness($color) > 50) {
    @return $dark; // Lighter background, return dark color
  } @else {
    @return $light; // Darker background, return light color
  }
}